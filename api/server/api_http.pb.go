// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v3.21.9
// source: server/api.proto

package helloworld

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTreasuryConfirmWithdraw = "/helloworld.Treasury/ConfirmWithdraw"
const OperationTreasuryCreateWithdraw = "/helloworld.Treasury/CreateWithdraw"
const OperationTreasuryGetWithdrawStatus = "/helloworld.Treasury/GetWithdrawStatus"

type TreasuryHTTPServer interface {
	// ConfirmWithdraw confirm withdraw request
	ConfirmWithdraw(context.Context, *ConfirmWithdrawRequest) (*ConfirmWithdrawReply, error)
	// CreateWithdraw create withdraw
	CreateWithdraw(context.Context, *CreateWithdrawRequest) (*CreateWithdrawReply, error)
	// GetWithdrawStatus get withdraw status
	GetWithdrawStatus(context.Context, *GetWithdrawStatusRequest) (*GetWithdrawStatusReply, error)
}

func RegisterTreasuryHTTPServer(s *http.Server, srv TreasuryHTTPServer) {
	r := s.Route("/")
	r.GET("/withdraw/{request_id}", _Treasury_GetWithdrawStatus0_HTTP_Handler(srv))
	r.POST("/withdraw", _Treasury_CreateWithdraw0_HTTP_Handler(srv))
	r.POST("/confirm/{request_id}", _Treasury_ConfirmWithdraw0_HTTP_Handler(srv))
}

func _Treasury_GetWithdrawStatus0_HTTP_Handler(srv TreasuryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWithdrawStatusRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTreasuryGetWithdrawStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWithdrawStatus(ctx, req.(*GetWithdrawStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWithdrawStatusReply)
		return ctx.Result(200, reply)
	}
}

func _Treasury_CreateWithdraw0_HTTP_Handler(srv TreasuryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateWithdrawRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTreasuryCreateWithdraw)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateWithdraw(ctx, req.(*CreateWithdrawRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateWithdrawReply)
		return ctx.Result(200, reply)
	}
}

func _Treasury_ConfirmWithdraw0_HTTP_Handler(srv TreasuryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ConfirmWithdrawRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTreasuryConfirmWithdraw)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ConfirmWithdraw(ctx, req.(*ConfirmWithdrawRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ConfirmWithdrawReply)
		return ctx.Result(200, reply)
	}
}

type TreasuryHTTPClient interface {
	ConfirmWithdraw(ctx context.Context, req *ConfirmWithdrawRequest, opts ...http.CallOption) (rsp *ConfirmWithdrawReply, err error)
	CreateWithdraw(ctx context.Context, req *CreateWithdrawRequest, opts ...http.CallOption) (rsp *CreateWithdrawReply, err error)
	GetWithdrawStatus(ctx context.Context, req *GetWithdrawStatusRequest, opts ...http.CallOption) (rsp *GetWithdrawStatusReply, err error)
}

type TreasuryHTTPClientImpl struct {
	cc *http.Client
}

func NewTreasuryHTTPClient(client *http.Client) TreasuryHTTPClient {
	return &TreasuryHTTPClientImpl{client}
}

func (c *TreasuryHTTPClientImpl) ConfirmWithdraw(ctx context.Context, in *ConfirmWithdrawRequest, opts ...http.CallOption) (*ConfirmWithdrawReply, error) {
	var out ConfirmWithdrawReply
	pattern := "/confirm/{request_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTreasuryConfirmWithdraw))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TreasuryHTTPClientImpl) CreateWithdraw(ctx context.Context, in *CreateWithdrawRequest, opts ...http.CallOption) (*CreateWithdrawReply, error) {
	var out CreateWithdrawReply
	pattern := "/withdraw"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTreasuryCreateWithdraw))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TreasuryHTTPClientImpl) GetWithdrawStatus(ctx context.Context, in *GetWithdrawStatusRequest, opts ...http.CallOption) (*GetWithdrawStatusReply, error) {
	var out GetWithdrawStatusReply
	pattern := "/withdraw/{request_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTreasuryGetWithdrawStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
