// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/longxboy/treasure/ent/predicate"
	"github.com/longxboy/treasure/ent/request"
)

// RequestUpdate is the builder for updating Request entities.
type RequestUpdate struct {
	config
	hooks    []Hook
	mutation *RequestMutation
}

// Where appends a list predicates to the RequestUpdate builder.
func (ru *RequestUpdate) Where(ps ...predicate.Request) *RequestUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetStatus sets the "status" field.
func (ru *RequestUpdate) SetStatus(i int64) *RequestUpdate {
	ru.mutation.ResetStatus()
	ru.mutation.SetStatus(i)
	return ru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ru *RequestUpdate) SetNillableStatus(i *int64) *RequestUpdate {
	if i != nil {
		ru.SetStatus(*i)
	}
	return ru
}

// AddStatus adds i to the "status" field.
func (ru *RequestUpdate) AddStatus(i int64) *RequestUpdate {
	ru.mutation.AddStatus(i)
	return ru
}

// SetAmount sets the "amount" field.
func (ru *RequestUpdate) SetAmount(i int64) *RequestUpdate {
	ru.mutation.ResetAmount()
	ru.mutation.SetAmount(i)
	return ru
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ru *RequestUpdate) SetNillableAmount(i *int64) *RequestUpdate {
	if i != nil {
		ru.SetAmount(*i)
	}
	return ru
}

// AddAmount adds i to the "amount" field.
func (ru *RequestUpdate) AddAmount(i int64) *RequestUpdate {
	ru.mutation.AddAmount(i)
	return ru
}

// SetRecipient sets the "recipient" field.
func (ru *RequestUpdate) SetRecipient(s string) *RequestUpdate {
	ru.mutation.SetRecipient(s)
	return ru
}

// SetNillableRecipient sets the "recipient" field if the given value is not nil.
func (ru *RequestUpdate) SetNillableRecipient(s *string) *RequestUpdate {
	if s != nil {
		ru.SetRecipient(*s)
	}
	return ru
}

// SetTxHash sets the "tx_hash" field.
func (ru *RequestUpdate) SetTxHash(s string) *RequestUpdate {
	ru.mutation.SetTxHash(s)
	return ru
}

// SetNillableTxHash sets the "tx_hash" field if the given value is not nil.
func (ru *RequestUpdate) SetNillableTxHash(s *string) *RequestUpdate {
	if s != nil {
		ru.SetTxHash(*s)
	}
	return ru
}

// SetNonce sets the "nonce" field.
func (ru *RequestUpdate) SetNonce(i int64) *RequestUpdate {
	ru.mutation.ResetNonce()
	ru.mutation.SetNonce(i)
	return ru
}

// SetNillableNonce sets the "nonce" field if the given value is not nil.
func (ru *RequestUpdate) SetNillableNonce(i *int64) *RequestUpdate {
	if i != nil {
		ru.SetNonce(*i)
	}
	return ru
}

// AddNonce adds i to the "nonce" field.
func (ru *RequestUpdate) AddNonce(i int64) *RequestUpdate {
	ru.mutation.AddNonce(i)
	return ru
}

// SetExecuted sets the "executed" field.
func (ru *RequestUpdate) SetExecuted(b bool) *RequestUpdate {
	ru.mutation.SetExecuted(b)
	return ru
}

// SetNillableExecuted sets the "executed" field if the given value is not nil.
func (ru *RequestUpdate) SetNillableExecuted(b *bool) *RequestUpdate {
	if b != nil {
		ru.SetExecuted(*b)
	}
	return ru
}

// Mutation returns the RequestMutation object of the builder.
func (ru *RequestUpdate) Mutation() *RequestMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RequestUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RequestUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RequestUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RequestUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(request.Table, request.Columns, sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt64))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.SetField(request.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedStatus(); ok {
		_spec.AddField(request.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.Amount(); ok {
		_spec.SetField(request.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedAmount(); ok {
		_spec.AddField(request.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.Recipient(); ok {
		_spec.SetField(request.FieldRecipient, field.TypeString, value)
	}
	if value, ok := ru.mutation.TxHash(); ok {
		_spec.SetField(request.FieldTxHash, field.TypeString, value)
	}
	if value, ok := ru.mutation.Nonce(); ok {
		_spec.SetField(request.FieldNonce, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedNonce(); ok {
		_spec.AddField(request.FieldNonce, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.Executed(); ok {
		_spec.SetField(request.FieldExecuted, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{request.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RequestUpdateOne is the builder for updating a single Request entity.
type RequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RequestMutation
}

// SetStatus sets the "status" field.
func (ruo *RequestUpdateOne) SetStatus(i int64) *RequestUpdateOne {
	ruo.mutation.ResetStatus()
	ruo.mutation.SetStatus(i)
	return ruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruo *RequestUpdateOne) SetNillableStatus(i *int64) *RequestUpdateOne {
	if i != nil {
		ruo.SetStatus(*i)
	}
	return ruo
}

// AddStatus adds i to the "status" field.
func (ruo *RequestUpdateOne) AddStatus(i int64) *RequestUpdateOne {
	ruo.mutation.AddStatus(i)
	return ruo
}

// SetAmount sets the "amount" field.
func (ruo *RequestUpdateOne) SetAmount(i int64) *RequestUpdateOne {
	ruo.mutation.ResetAmount()
	ruo.mutation.SetAmount(i)
	return ruo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ruo *RequestUpdateOne) SetNillableAmount(i *int64) *RequestUpdateOne {
	if i != nil {
		ruo.SetAmount(*i)
	}
	return ruo
}

// AddAmount adds i to the "amount" field.
func (ruo *RequestUpdateOne) AddAmount(i int64) *RequestUpdateOne {
	ruo.mutation.AddAmount(i)
	return ruo
}

// SetRecipient sets the "recipient" field.
func (ruo *RequestUpdateOne) SetRecipient(s string) *RequestUpdateOne {
	ruo.mutation.SetRecipient(s)
	return ruo
}

// SetNillableRecipient sets the "recipient" field if the given value is not nil.
func (ruo *RequestUpdateOne) SetNillableRecipient(s *string) *RequestUpdateOne {
	if s != nil {
		ruo.SetRecipient(*s)
	}
	return ruo
}

// SetTxHash sets the "tx_hash" field.
func (ruo *RequestUpdateOne) SetTxHash(s string) *RequestUpdateOne {
	ruo.mutation.SetTxHash(s)
	return ruo
}

// SetNillableTxHash sets the "tx_hash" field if the given value is not nil.
func (ruo *RequestUpdateOne) SetNillableTxHash(s *string) *RequestUpdateOne {
	if s != nil {
		ruo.SetTxHash(*s)
	}
	return ruo
}

// SetNonce sets the "nonce" field.
func (ruo *RequestUpdateOne) SetNonce(i int64) *RequestUpdateOne {
	ruo.mutation.ResetNonce()
	ruo.mutation.SetNonce(i)
	return ruo
}

// SetNillableNonce sets the "nonce" field if the given value is not nil.
func (ruo *RequestUpdateOne) SetNillableNonce(i *int64) *RequestUpdateOne {
	if i != nil {
		ruo.SetNonce(*i)
	}
	return ruo
}

// AddNonce adds i to the "nonce" field.
func (ruo *RequestUpdateOne) AddNonce(i int64) *RequestUpdateOne {
	ruo.mutation.AddNonce(i)
	return ruo
}

// SetExecuted sets the "executed" field.
func (ruo *RequestUpdateOne) SetExecuted(b bool) *RequestUpdateOne {
	ruo.mutation.SetExecuted(b)
	return ruo
}

// SetNillableExecuted sets the "executed" field if the given value is not nil.
func (ruo *RequestUpdateOne) SetNillableExecuted(b *bool) *RequestUpdateOne {
	if b != nil {
		ruo.SetExecuted(*b)
	}
	return ruo
}

// Mutation returns the RequestMutation object of the builder.
func (ruo *RequestUpdateOne) Mutation() *RequestMutation {
	return ruo.mutation
}

// Where appends a list predicates to the RequestUpdate builder.
func (ruo *RequestUpdateOne) Where(ps ...predicate.Request) *RequestUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RequestUpdateOne) Select(field string, fields ...string) *RequestUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Request entity.
func (ruo *RequestUpdateOne) Save(ctx context.Context) (*Request, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RequestUpdateOne) SaveX(ctx context.Context) *Request {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RequestUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RequestUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RequestUpdateOne) sqlSave(ctx context.Context) (_node *Request, err error) {
	_spec := sqlgraph.NewUpdateSpec(request.Table, request.Columns, sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt64))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Request.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, request.FieldID)
		for _, f := range fields {
			if !request.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != request.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.SetField(request.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedStatus(); ok {
		_spec.AddField(request.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.Amount(); ok {
		_spec.SetField(request.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedAmount(); ok {
		_spec.AddField(request.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.Recipient(); ok {
		_spec.SetField(request.FieldRecipient, field.TypeString, value)
	}
	if value, ok := ruo.mutation.TxHash(); ok {
		_spec.SetField(request.FieldTxHash, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Nonce(); ok {
		_spec.SetField(request.FieldNonce, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedNonce(); ok {
		_spec.AddField(request.FieldNonce, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.Executed(); ok {
		_spec.SetField(request.FieldExecuted, field.TypeBool, value)
	}
	_node = &Request{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{request.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
